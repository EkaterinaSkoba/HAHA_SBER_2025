import React, { useState, useEffect } from 'react';
import './TabStyles.css';

const SummaryTab = ({ event, updateEvent }) => {
  const [transferTemplate, setTransferTemplate] = useState('');
  const [savedTemplate, setSavedTemplate] = useState(event.transferTemplate || '');
  const [expenseCalculation, setExpenseCalculation] = useState([]);
  const [showCalculation, setShowCalculation] = useState(false);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
  const handleSaveTemplate = () => {
    if (transferTemplate.trim()) {
      setSavedTemplate(transferTemplate);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç–µ —Å–æ–±—ã—Ç–∏—è
      const updatedEvent = {
        ...event,
        transferTemplate: transferTemplate
      };
      
      updateEvent(updatedEvent);
    }
  };

  // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤–∑–Ω–æ—Å–æ–≤
  const calculateExpenses = () => {
    const participants = event.participants;
    const purchases = event.purchases || [];
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç
    const totalExpenses = purchases.reduce((sum, item) => {
      return sum + (item.cost || 0);
    }, 0);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª—é –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const perPersonShare = totalExpenses / participants.length;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
    const participantExpenses = participants.map(participantId => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫—É–ø–∫–∏, –≥–¥–µ —á–µ–ª–æ–≤–µ–∫ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
      const personalExpenses = purchases
        .filter(p => p.responsible === participantId)
        .reduce((sum, purchase) => sum + (purchase.cost || 0), 0);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–æ–ª–µ–π –∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏
      const difference = perPersonShare - personalExpenses;
      
      return {
        id: participantId,
        totalSpent: personalExpenses,
        share: perPersonShare,
        difference: difference,
        settled: false
      };
    });
    
    setExpenseCalculation(participantExpenses);
    setShowCalculation(true);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
  const toggleSettled = (participantId) => {
    setExpenseCalculation(prevCalculation => {
      return prevCalculation.map(p => {
        if (p.id === participantId) {
          return { ...p, settled: !p.settled };
        }
        return p;
      });
    });
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const generateMessageText = (participant) => {
    if (!savedTemplate) {
      return `–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è –¥–æ–ª—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${participant.share.toFixed(2)} ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏ ${Math.abs(participant.difference).toFixed(2)} ‚ÇΩ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.`;
    }
    
    let message = savedTemplate;
    message = message.replace(/{eventTitle}/g, event.title);
    message = message.replace(/{share}/g, participant.share.toFixed(2));
    message = message.replace(/{amount}/g, Math.abs(participant.difference).toFixed(2));
    
    return message;
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º
  const copyMessage = (participant) => {
    const message = generateMessageText(participant);
    
    navigator.clipboard.writeText(message)
      .then(() => {
        alert('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      })
      .catch(err => {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ', err);
      });
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º
  const sendTelegramMessage = (participant) => {
    const message = generateMessageText(participant);
    const encodedMessage = encodeURIComponent(message);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    window.open(`https://t.me/share/url?url=${encodedMessage}`, '_blank');
  };

  return (
    <div className="summary-tab">
      <div className="tab-header">
        <h2>–ò—Ç–æ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>
      </div>
      
      <div className="template-section card">
        <h3>–®–∞–±–ª–æ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤</h3>
        <p className="hint">
          –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'{eventTitle}'}, {'{share}'}, {'{amount}'}
        </p>
        
        <div className="template-input">
          <textarea
            className="form-control"
            rows="4"
            value={transferTemplate}
            onChange={(e) => setTransferTemplate(e.target.value)}
            placeholder="–ü—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è –¥–æ–ª—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ &quot;{eventTitle}&quot; —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {share} ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏ {amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É 1234 5678 9012 3456."
          ></textarea>
          
          <button className="btn btn-primary" onClick={handleSaveTemplate}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
          </button>
        </div>
        
        {savedTemplate && (
          <div className="saved-template">
            <h4>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:</h4>
            <div className="template-preview card">
              {savedTemplate}
            </div>
          </div>
        )}
      </div>
      
      <div className="expense-calculation card">
        <div className="expense-header">
          <h3>–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤–∑–Ω–æ—Å–æ–≤</h3>
          <button 
            className="btn btn-primary" 
            onClick={calculateExpenses}
          >
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
          </button>
        </div>
        
        {showCalculation && expenseCalculation.length > 0 && (
          <div className="calculation-results">
            <div className="table-container">
              <table>
                <thead>
                  <tr>
                    <th></th>
                    <th>–£—á–∞—Å—Ç–Ω–∏–∫</th>
                    <th>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</th>
                    <th>–î–æ–ª—è</th>
                    <th>–ü–µ—Ä–µ–≤–æ–¥</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {expenseCalculation.map(participant => (
                    <tr key={participant.id} className={participant.settled ? 'settled' : ''}>
                      <td>
                        <input
                          type="checkbox"
                          checked={participant.settled}
                          onChange={() => toggleSettled(participant.id)}
                        />
                      </td>
                      <td>{participant.id === 'currentUser' ? '–Ø (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)' : `–£—á–∞—Å—Ç–Ω–∏–∫ ${participant.id}`}</td>
                      <td>{participant.totalSpent.toFixed(2)} ‚ÇΩ</td>
                      <td>{participant.share.toFixed(2)} ‚ÇΩ</td>
                      <td className={participant.difference > 0 ? 'positive' : (participant.difference < 0 ? 'negative' : '')}>
                        {participant.difference === 0 ? '–ù–µ—Ç' : (
                          participant.difference > 0 
                            ? `–ü–æ–ª—É—á–∏—Ç—å ${participant.difference.toFixed(2)} ‚ÇΩ` 
                            : `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ${Math.abs(participant.difference).toFixed(2)} ‚ÇΩ`
                        )}
                      </td>
                      <td className="actions-cell">
                        {participant.difference < 0 && (
                          <>
                            <button 
                              className="btn-icon copy"
                              onClick={() => copyMessage(participant)}
                              title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                            >
                              üìã
                            </button>
                            <button 
                              className="btn-icon telegram"
                              onClick={() => sendTelegramMessage(participant)}
                              title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"
                            >
                              ‚úàÔ∏è
                            </button>
                          </>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SummaryTab; 